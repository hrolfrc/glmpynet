.. _phase_1_analysis:

Phase 1: `glmnetpp` Foundation Analysis
=======================================

Objective
---------

The objective of this phase is to conduct a thorough analysis of the ``glmnetpp`` C++ core engine to establish a complete and accurate set of build requirements. This document serves as the formal record of that analysis, providing the necessary foundation for the subsequent action plan.

Background: Initial Build Failures
----------------------------------

An initial attempt to build the ``glmnetpp`` library by following the instructions in the project's ``README.md`` file was unsuccessful. The process failed with a critical Bazel error: *"no such attribute 'compiler' in 'cc_toolchain' rule"*, indicating that the project's custom Clang toolchain definition was invalid or incomplete.

This initial failure highlighted several challenges:

* **Incomplete Documentation:** The ``README.md`` omitted several critical dependencies and setup steps.
* **Toolchain Complexity:** The project relies on a custom-defined Bazel toolchain that requires specific paths for the compiler and system libraries, which were not correctly configured.
* **Uncertainty in Paths:** The exact locations of test and benchmark targets were not confirmed.

These issues led to an inefficient trial-and-error approach. To avoid this, a more systematic methodology was required to uncover the project's true requirements before attempting another build.

Methodology: Static Analysis
----------------------------

To create a complete picture of the build system, a static analysis was performed on the core Bazel configuration files. This "Infrastructure as Code" approach allows us to treat the configuration files as the definitive source of truth for the project's dependencies and build process.

The following files were analyzed:

* **``WORKSPACE``:** This file defines all external, third-party libraries that the project depends on. It is the primary source for understanding the project's software supply chain.
* **``generate_bazelrc``:** This Python script dynamically creates the ``.bazelrc`` file, which contains the specific compiler flags, toolchain paths, and other build options. Analyzing this script reveals the precise compiler standards and system-level dependencies.
* **``BUILD.bazel``:** The top-level build file defines the main ``glmnetpp`` library target itself, revealing its internal structure and dependencies (such as Eigen).

Requirements Analysis
---------------------

The analysis produced a comprehensive list of requirements, which are detailed below. Each requirement is assigned a unique identifier (e.g., ``(R-SYS-01)``) for traceability in the corresponding action plan.

### Stated Requirements (from ``README.md``)

These requirements were explicitly mentioned in the project's documentation.

(R-SYS-01) C++ Toolchain
    A C++ toolchain that supports C++14 and OpenMP.

(R-SYS-02) Bazel
    An installation of the Bazel build tool.

### Discovered Requirements (from Static Analysis)

These requirements were not explicitly stated in the main documentation but were discovered through analysis of the build configuration files.

**System-Level Dependencies:**

(R-SYS-03) Conda Environment
    The build system is explicitly designed to use compilers and libraries provided by a Conda environment.

(R-SYS-04) R Language
    The ``generate_bazelrc`` script requires ``Rscript`` to be available in the system's ``PATH``. It actively queries the R environment to find paths for R's header and library files, indicating a direct dependency.

**External C++ Dependencies (from ``WORKSPACE``):**

(R-CPP-01) GoogleTest
    The GoogleTest framework is required for compiling and running the C++ unit test suite.

(R-CPP-02) Google Benchmark
    The Google Benchmark library is required for the performance benchmark suite.

(R-CPP-03) Eigen (v3.4.0)
    The Eigen C++ template library for linear algebra is a core dependency for the ``glmnetpp`` library itself.

**Compiler & Build Requirements (from ``generate_bazelrc``):**

(R-BLD-01) C++14 Standard
    The build is configured to strictly require the C++14 standard (``-std=c++14``).

(R-BLD-02) OpenMP Support
    OpenMP must be enabled for both compiling (``-fopenmp``) and linking (``--linkopt -fopenmp``).

(R-BLD-03) `.bazelrc` Generation
    The ``.bazelrc`` file, which contains machine-specific paths and compiler flags, **must** be generated by running the ``generate_bazelrc`` Python script before any build is attempted. This is a critical, undocumented setup step.
